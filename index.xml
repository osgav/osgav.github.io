<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>osgav</title>
    <link>https://osgav.run/</link>
    <description>Recent content on osgav</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 12 Jun 2016 21:33:09 +0000</lastBuildDate>
    <atom:link href="https://osgav.run/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Hugo Platform Runbook</title>
      <link>https://osgav.run/page/projects/hugo-platform-runbook/</link>
      <pubDate>Sun, 12 Jun 2016 21:33:09 +0000</pubDate>
      
      <guid>https://osgav.run/page/projects/hugo-platform-runbook/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://osgav.run/page/projects&#34;&gt;&amp;lt; back to projects&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;&lt;code&gt;created: 12/06/2016&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;This is my runbook for operating my blog, based on the scripts I wrote to help with hugo building and publishing, you can read about these here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://osgav.run/page/projects/hugo-build-and-publish-workflow&#34;&gt;Hugo Build and Publish Workflow&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://osgav.run/page/projects/hugo-markdown-cheatsheet&#34;&gt;Hugo Markdown Cheatsheet&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;download source and website &amp;ndash;&amp;gt;&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; HTTPS authentication until I set up SSH authentication
&amp;gt; Run from vagrant virtual machine at /vagrant/workbench
$ git clone https://osgav@github.com/osgav/osgav-source.git osgav-source
$ git clone https://osgav@github.com/osgav/osgav.github.io.git osgav-root-public
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;view cheatsheet &amp;ndash;&amp;gt;&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;$ cd osgav-source
$ ./hugo/01-serve-withdrafts
&amp;gt; view blog in browser at http://192.168.56.2:1313 - cheatsheet is latest post
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;create new content and iterate on it &amp;ndash;&amp;gt;&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;$ cd osgav-source
$ ./hugo/01-serve-withdrafts
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; open another terminal
$ vagrant ssh
$ cd /vagrant/workbench/osgav-source
$ hugo -t casper new post/next-new-post.md
$ vi content/post/next-new-post.md
&amp;gt; update content and save
&amp;gt; view blog in browser
&amp;gt; update content and save
&amp;gt; view blog in browser...
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;publish content &amp;ndash;&amp;gt;&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;$ ./hugo/02-serve
&amp;gt; preview content locally
&amp;gt; if your post/page is missing, then try
$ hugo undraft post/next-new-post.md
$ ./hugo/03-publish-stage
$ ./hugo/04-publish-prod &amp;quot;posting next new post!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;unpublish content &amp;ndash;&amp;gt;&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; same as publishing content
&amp;gt; but set draft = true in post/page front matter
&amp;gt; then publish again
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;update existing content (typo, update image) &amp;ndash;&amp;gt;&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; edit image accordingly and save it
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; if image filename has changed, update posts/pages referencing filename
&amp;gt; update posts/pages with typo
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ ./hugo/02-serve
&amp;gt; preview content locally if necessary - unlikely for typo
$ ./hugo/03-publish-stage
$ ./hugo/04-publish-prod &amp;quot;update typo in last post&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>hugo --&gt; https://osgav.run</title>
      <link>https://osgav.run/post/hugo-to-https/</link>
      <pubDate>Sun, 12 Jun 2016 11:33:49 +0000</pubDate>
      
      <guid>https://osgav.run/post/hugo-to-https/</guid>
      <description>&lt;p&gt;I stumbled across the Hugo static site generator recently and after reading a little and watching a &lt;a href=&#34;https://gohugo.io/overview/quickstart/&#34;&gt;short video&lt;/a&gt; (01:08) I thought it looked pretty interesting and worth trying out. It&amp;rsquo;s a fairly light blogging platform which can be used with GitHub Pages, which can then be topped with another service to provide SSL via a Let&amp;rsquo;s Encrypt certificate.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m still not 100% sure about the service hooking me up with the Let&amp;rsquo;s Encrypt SSL at the moment - we&amp;rsquo;ll see how it goes. Otherwise it looks like Hugo &amp;amp; GitHub Pages will provide a smooth experience for maintaining a blog of posts and pages.&lt;/p&gt;

&lt;p&gt;The main steps I went through after clicking some link about &lt;em&gt;hugo&lt;/em&gt;&amp;hellip;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;discovered &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;tested blog locally with &lt;code&gt;hugo server&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;found really awesome responsive &lt;a href=&#34;https://github.com/vjeantet/hugo-theme-casper&#34;&gt;theme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;wrote initial content&lt;/li&gt;
&lt;li&gt;uploaded to GitHub Pages &lt;strong&gt;&lt;code&gt;https://osgav.github.io&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;purchased domain &lt;strong&gt;&lt;code&gt;osgav.run&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;configured &lt;a href=&#34;https://github.com/osgav/osgav.github.io&#34;&gt;osgav.github.io&lt;/a&gt; repo with &lt;a href=&#34;https://github.com/osgav/osgav.github.io/blob/master/CNAME&#34;&gt;CNAME&lt;/a&gt; file&lt;/li&gt;
&lt;li&gt;registered for Kloudsec CDN service to provide Let&amp;rsquo;s Encrypt SSL&lt;/li&gt;
&lt;li&gt;configured Kloudsec website to point at GitHub Pages site&lt;/li&gt;
&lt;li&gt;configured &lt;code&gt;NS&lt;/code&gt; records with domain provider (provider&amp;rsquo;s nameservers)&lt;/li&gt;
&lt;li&gt;configured &lt;code&gt;A&lt;/code&gt; records with domain provider (Kloudsec&amp;rsquo;s IPs)&lt;/li&gt;
&lt;li&gt;updated Hugo site configuration to use &lt;strong&gt;&lt;code&gt;https://osgav.run&lt;/code&gt;&lt;/strong&gt; domain name&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I didn&amp;rsquo;t necessarily perform these in that exact order towards the end (and I&amp;rsquo;m not entirely certain that would be an optimum order) so consequently I did have a little bit of downtime between switching my site from osgav.github.io to osgav.run but I believe it was due to the new DNS not being fully live yet - so not the kind of downtime Kloudsec&amp;rsquo;s documentation advises they mitigate against.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;wrote initial content&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;hellip;actually consisted of thoroughly digging through the project files and getting a grasp of its structure, setting up the menu and theming and looking at changes I&amp;rsquo;d like to make that aren&amp;rsquo;t so simple. While doing this I also started writing a few short scripts and created a cheatsheet to help make writing and publishing blog posts easier.&lt;/p&gt;

&lt;p&gt;I still have plenty to learn about Hugo so I will no doubt revisit these in future, but I&amp;rsquo;ve written a bit about the build process (yet to automate publishing) and the cheatsheet I&amp;rsquo;ve started here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://osgav.run/page/projects/hugo-build-and-publish-workflow&#34;&gt;Hugo Build and Publish Workflow&lt;/a&gt; (in progress)&lt;br /&gt;
&lt;a href=&#34;https://osgav.run/page/projects/hugo-markdown-cheatsheet&#34;&gt;Hugo Markdown Cheatsheet&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GitHub has a lot of relevant help pages for setting up a GitHub Pages site and configuring a custom domain. I read through many of them, which I&amp;rsquo;ve listed below - if you&amp;rsquo;re thinking about setting up GitHub Pages with a custom domain and powering it with Hugo, hopefully some of the hints I&amp;rsquo;ve mentioned will be useful alongside the GitHub documentation and other material you read&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gohugo.io/tutorials/github-pages-blog/&#34;&gt;https://gohugo.io/tutorials/github-pages-blog/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://help.github.com/articles/quick-start-setting-up-a-custom-domain/&#34;&gt;https://help.github.com/articles/quick-start-setting-up-a-custom-domain/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://help.github.com/articles/setting-up-your-pages-site-repository/&#34;&gt;https://help.github.com/articles/setting-up-your-pages-site-repository/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://help.github.com/articles/setting-up-an-apex-domain-and-www-subdomain/&#34;&gt;https://help.github.com/articles/setting-up-an-apex-domain-and-www-subdomain/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://help.github.com/articles/about-supported-custom-domains/#apex-domains&#34;&gt;https://help.github.com/articles/about-supported-custom-domains/#apex-domains&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://help.github.com/articles/using-a-custom-domain-with-github-pages/&#34;&gt;https://help.github.com/articles/using-a-custom-domain-with-github-pages/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://help.github.com/articles/about-supported-custom-domains/&#34;&gt;https://help.github.com/articles/about-supported-custom-domains/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://help.github.com/articles/setting-up-an-apex-domain/&#34;&gt;https://help.github.com/articles/setting-up-an-apex-domain/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://help.github.com/articles/user-organization-and-project-pages/&#34;&gt;https://help.github.com/articles/user-organization-and-project-pages/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://help.github.com/articles/creating-project-pages-manually/&#34;&gt;https://help.github.com/articles/creating-project-pages-manually/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://help.github.com/articles/securing-your-github-pages-site-with-https/&#34;&gt;https://help.github.com/articles/securing-your-github-pages-site-with-https/&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The extra layer - Kloudsec - providing the Let&amp;rsquo;s Encrypt SSL is necessary because GitHub Pages do not currently support SSL on custom domains.&lt;/p&gt;

&lt;p&gt;You can have SSL on a *.github.io domain or plain HTTP on a custom domain.&lt;/p&gt;

&lt;p&gt;While reading into this I gathered CloudFlare is a popular solution but people do have some concerns over certain configuration options - by using Kloudsec I am by no means using the most optimally configurable and secure solution but it is &lt;em&gt;very easy&lt;/em&gt; to get SSL enabled for the visitor &amp;ndash;&amp;gt; Kloudsec edge portion of the journey.&lt;/p&gt;

&lt;p&gt;I haven&amp;rsquo;t dug particularly deep into this but it may be possible for CloudFlare to serve out a HTTPS custom domain from the edge and communicate with a HTTPS GitHub Pages origin (where you haven&amp;rsquo;t configured a custom domain so are still on HTTPS *.github.io) - so for those who want a particularly secure static blog that may be the thing to do&amp;hellip;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Also while reading into all of this, I stumbled across a colleague&amp;rsquo;s personal blog that amusingly has the same theme (the original) for another blogging platform - Ghost. And is hosted in an entirely different way, but produces a very similar output :) &lt;a href=&#34;https://iainjp.com/&#34;&gt;https://iainjp.com/&lt;/a&gt; - &lt;a href=&#34;https://iainjp.com/from-jekyll-to-ghost/&#34;&gt;From Jekyll to Ghost&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Hugo Build and Publish Workflow</title>
      <link>https://osgav.run/page/projects/hugo-build-and-publish-workflow/</link>
      <pubDate>Sat, 11 Jun 2016 20:10:08 +0000</pubDate>
      
      <guid>https://osgav.run/page/projects/hugo-build-and-publish-workflow/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://osgav.run/page/projects&#34;&gt;&amp;lt; back to projects&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;&lt;code&gt;created: 11/06/2016&lt;/code&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;&lt;code&gt;updated: 12/06/2016&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;building:b0d24be26c981e452cbdca0cff1978e4&#34;&gt;building&lt;/h3&gt;

&lt;p&gt;To make building and previewing changes locally easier, I wrote a couple of short scripts. For context, I run the &lt;code&gt;hugo&lt;/code&gt; commands inside a vagrant virtual machine (linux) and access the site using a web browser on the host machine (windows).&lt;/p&gt;

&lt;p&gt;In the source for my hugo site, I have a &lt;code&gt;hugo&lt;/code&gt; folder for these scripts. This makes running them similar to invoking the &lt;code&gt;hugo&lt;/code&gt; command itself:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls -1 osgav
archetypes
config.toml
content
data
hugo
layouts
public
static
themes

$ tree osgav/hugo/
osgav/hugo/
├── build-public
├── serve
└── serve-withdrafts

$ ./hugo/serve
$ ./hugo/build-public
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As mentioned in &lt;a href=&#34;https://osgav.run/page/hugo-markdown-cheatsheet&#34;&gt;Hugo Markdown Cheatsheet&lt;/a&gt;, if you run &lt;code&gt;hugo server&lt;/code&gt; with the parameter &lt;code&gt;--buildDrafts&lt;/code&gt; then any posts or pages where &lt;code&gt;draft = true&lt;/code&gt; will also be published to the blog on the local hugo server.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;--buildDrafts&lt;/code&gt; parameter is the only difference between the &lt;code&gt;serve&lt;/code&gt; and &lt;code&gt;serve-withdrafts&lt;/code&gt; scripts.&lt;/p&gt;

&lt;p&gt;Both the &lt;code&gt;serve&lt;/code&gt; and &lt;code&gt;build-public&lt;/code&gt; scripts ignore drafts, so I can use &lt;code&gt;serve&lt;/code&gt; first to preview what will be generated after I run &lt;code&gt;build-public&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Until I take a look at live reloading, this let&amp;rsquo;s me do the following to make changes and preview them - my &lt;strong&gt;&lt;em&gt;build workflow:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vi content/page/hugo-build-and-publish-workflow.md
&amp;lt;make edits&amp;gt;
$ ./hugo/serve-withdrafts
...
Press Ctrl+C to stop
&amp;lt;preview changes&amp;gt;
&amp;lt;ctrl+c to stop hugo server&amp;gt;

repeat
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With live reload I shouldn&amp;rsquo;t need to stop the server to make changes - simply saving changes &lt;s&gt;and refreshing the page in the browser&lt;/s&gt; will be enough.&lt;/p&gt;

&lt;p&gt;I use a mixture of &lt;code&gt;vi&lt;/code&gt; and &lt;a href=&#34;https://www.sublimetext.com/&#34;&gt;Sublime&lt;/a&gt; - &lt;s&gt;I suspect I may use Sublime more once I configure live reload&amp;hellip;&lt;/s&gt; &lt;em&gt;Wrong! LiveReload is already enabled by default, but &lt;code&gt;hugo server&lt;/code&gt; only seems to be able to detect changes to files made from inside my virtual machine - using Sublime on the host isn&amp;rsquo;t detected, so the page is not reloaded&amp;hellip;&lt;/em&gt;&lt;/p&gt;

&lt;h5 id=&#34;what-s-in-the-scripts:b0d24be26c981e452cbdca0cff1978e4&#34;&gt;what&amp;rsquo;s in the scripts?&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;./hugo/serve&lt;/code&gt;&lt;/strong&gt;&lt;br /&gt;
The &lt;code&gt;serve&lt;/code&gt; scripts also use the &lt;code&gt;hugo server&lt;/code&gt; parameters &lt;code&gt;--port&lt;/code&gt; &lt;code&gt;--bind&lt;/code&gt; &amp;amp; &lt;code&gt;--baseURL&lt;/code&gt; which let me correctly serve the site from my vagrant virtual machine and make it accessible to the host (&lt;code&gt;1313&lt;/code&gt; is actually the default port, &lt;code&gt;192.168.56.2&lt;/code&gt; is required or else its only accessible inside the virtual machine - this is the virtual machine&amp;rsquo;s IP on a Host-only Network that the host is also connected to. &lt;code&gt;http://192.168.56.2:1313/&lt;/code&gt; overrides the value specified in &lt;code&gt;config.toml&lt;/code&gt; that contains the site&amp;rsquo;s public domain).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash
hugo server --theme=casper \
--port=1313 \
--bind=192.168.56.2 \
--baseURL=&amp;quot;http://192.168.56.2:1313/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;./hugo/serve-withdrafts&lt;/code&gt;&lt;/strong&gt;&lt;br /&gt;
The only difference is &lt;code&gt;--buildDrafts \&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...
hugo server --theme=casper \
--buildDrafts \
--port=1313 \
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;./hugo/build-public&lt;/code&gt;&lt;/strong&gt;&lt;br /&gt;
The &lt;code&gt;build-public&lt;/code&gt; script also adds a &lt;code&gt;CNAME&lt;/code&gt; file to the root of the output directory &lt;code&gt;public&lt;/code&gt;. This file contains &lt;code&gt;osgav.run&lt;/code&gt; which enables GitHub Pages to serve from a custom domain once its being served from the correct place in GitHub.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash
hugo --theme=casper

# add CNAME file to public
touch public/CNAME
echo &amp;quot;osgav.run&amp;quot; &amp;gt; public/CNAME
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;publishing:b0d24be26c981e452cbdca0cff1978e4&#34;&gt;publishing&lt;/h3&gt;

&lt;p&gt;&lt;s&gt;I haven&amp;rsquo;t scripted the publishing steps yet - need to rename some things for better structuring - &lt;em&gt;like cleanly deploying another hugo site in another repo&amp;rsquo;s &lt;code&gt;gh-pages&lt;/code&gt; branch or simply not messing up this site&amp;hellip;&lt;/em&gt;&lt;/s&gt;&lt;/p&gt;

&lt;p&gt;So my &lt;strong&gt;&lt;em&gt;build workflow&lt;/em&gt;&lt;/strong&gt; has advanced a little since the beginning of this tale and some renaming has taken place as I hinted at above. With LiveReload now working (just a hitch with how I was editing my files) and another couple of scripts (one that swallows up &lt;code&gt;build-public&lt;/code&gt;) the &lt;strong&gt;&lt;em&gt;build and publish workflow&lt;/em&gt;&lt;/strong&gt; looks something like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Creating new content or editing drafts &amp;ndash;&amp;gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;$ cd osgav-source
$ ./hugo/01-serve-withdrafts
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;open another terminal&amp;gt;
$ vagrant ssh
$ cd /vagrant/workbench/osgav-source
$ hugo -t casper new post/next-new-post.md
$ vi content/post/next-new-post.md
&amp;lt;update content and save&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the &lt;code&gt;vi&lt;/code&gt; terminal on one side of the screen and a web browser on the other, I can see the changes immediately after &lt;code&gt;:w&lt;/code&gt; in &lt;code&gt;vi&lt;/code&gt;. Really awesome!&lt;/p&gt;

&lt;p&gt;And to publish that new content live, we follow the same workflow as below&amp;hellip; if I run &lt;code&gt;02-serve&lt;/code&gt; I will no longer see my &lt;a href=&#34;https://osgav.run/page/projects/hugo-markdown-cheatsheet&#34;&gt;cheatsheet&lt;/a&gt;, but if I notice the latest post isn&amp;rsquo;t there I can use the &lt;code&gt;hugo undraft&lt;/code&gt; command and it&amp;rsquo;ll appear immediately.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Simple update to live page like updating an image or a typo &amp;ndash;&amp;gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;edit image accordingly and save it&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;if image filename has changed, update posts/pages referencing filename&amp;gt;
&amp;lt;update posts/pages with typo&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ ./hugo/02-serve # to preview locally if necessary (unlikey for typo)
$ ./hugo/03-publish-stage
$ ./hugo/04-publish-prod &amp;quot;update typo in recent post&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;what-s-in-the-scripts-now:b0d24be26c981e452cbdca0cff1978e4&#34;&gt;what&amp;rsquo;s in the scripts now?&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;$ tree hugo
hugo
├── 01-serve-withdrafts
├── 02-serve
├── 03-publish-stage
└── 04-publish-prod
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;./hugo/03-publish-stage&lt;/code&gt;&lt;/strong&gt;&lt;br /&gt;
So where did the &lt;code&gt;build-public&lt;/code&gt; script go? It&amp;rsquo;s purpose, described above, is in fact the first step towards publishing. You can test all of the site completely locally with &lt;code&gt;hugo server&lt;/code&gt; without having to build the &lt;code&gt;public&lt;/code&gt; directory. As such it made sense to include its commands in a more complete script: &lt;code&gt;03-publish-stage&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash

# delete old &#39;public&#39; build
rm -rf public/

echo -e &amp;quot;\n--------------------------------------------------\n&amp;quot;
echo -e &amp;quot;building hugo site --&amp;gt; public\n&amp;quot;

hugo --theme=casper

echo -e &amp;quot;\n--------------------------------------------------\n&amp;quot;
echo &amp;quot;adding CNAME for osgav.run&amp;quot;
touch public/CNAME
echo &amp;quot;osgav.run&amp;quot; &amp;gt; public/CNAME

echo -e &amp;quot;copying hugo site public --&amp;gt; osgav-root-public\n&amp;quot;
rm -rf ../osgav-root-public/*
cp -r public/* ../osgav-root-public/

echo -e &amp;quot;\n--------------------------------------------------\n&amp;quot;
echo -e &amp;quot;$ git status osgav-root-public\n&amp;quot;

cd ../osgav-root-public
git status

echo -e &amp;quot;\n--------------------------------------------------\n&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;./hugo/04-publish-prod &amp;quot;commit message!&amp;quot;&lt;/code&gt;&lt;/strong&gt;&lt;br /&gt;
The &lt;code&gt;04-publish-prod&lt;/code&gt; script is the only one that takes an argument - the commit message to be used for the &lt;code&gt;git commit&lt;/code&gt; command. It also shows you the same &lt;code&gt;git status&lt;/code&gt; output as &lt;code&gt;03-publish-stage&lt;/code&gt; so you have another chance to sanity check what you&amp;rsquo;re pushing before you publish.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash

function pause(){
        read -sp &amp;quot;$*&amp;quot;
}

echo -e &amp;quot;\n---------------------------------------------\n&amp;quot;
echo &amp;quot;$ git status osgav-root-public&amp;quot;
echo -e &amp;quot;\n---------------------------------------------\n&amp;quot;

cd ../osgav-root-public
git status

echo -e &amp;quot;\n---------------------------------------------\n&amp;quot;
echo &amp;quot;Hit [Enter] to continue with:&amp;quot;
echo &amp;quot;$ git add --all&amp;quot;
echo &amp;quot;$ git commit -am \&amp;quot;$1\&amp;quot;&amp;quot;
echo &amp;quot;$ git push origin master&amp;quot;
echo &amp;quot;&amp;quot;
pause &amp;quot;Are you sure?&amp;quot;
echo -e &amp;quot;\n\n---------------------------------------------\n&amp;quot;

git add --all
git commit -am &amp;quot;$1&amp;quot;
git push origin master

echo -e &amp;quot;\n---------------------------------------------\n&amp;quot;
echo &amp;quot;updated published! https://osgav.run&amp;quot;
echo -e &amp;quot;\n---------------------------------------------\n&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see I&amp;rsquo;ve also numbered the scripts so it is obvious which order they should be getting used in. I still have some steps to add here - don&amp;rsquo;t want &lt;code&gt;osgav-source&lt;/code&gt; to get out of sync. Currently I&amp;rsquo;ve been catching it up manually meaning more than 1 commit to the site could be reverted if I checkout the previous version of the source. Not so great!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;https://osgav.run/page/projects&#34;&gt;&amp;lt; back to projects&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugo Markdown Cheatsheet</title>
      <link>https://osgav.run/page/projects/hugo-markdown-cheatsheet/</link>
      <pubDate>Sat, 11 Jun 2016 16:40:05 +0000</pubDate>
      
      <guid>https://osgav.run/page/projects/hugo-markdown-cheatsheet/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://osgav.run/page/projects&#34;&gt;&amp;lt; back to projects&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;&lt;code&gt;created: 11/06/2016&lt;/code&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;&lt;code&gt;updated: 12/06/2016&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt; there is a cheatsheet for Hugo Markdown available &lt;a href=&#34;https://raw.githubusercontent.com/osgav/osgav-source/master/content/post/cheatsheet.md&#34;&gt;in my github&lt;/a&gt;, transcribed from &lt;a href=&#34;https://sourceforge.net/p/hugo-generator/wiki/markdown_syntax/&#34;&gt;a guide here&lt;/a&gt; (not all of it mind) and a couple of bits from &lt;a href=&#34;https://gohugo.io/overview/introduction/&#34;&gt;gohugo docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can make this particularly handy by keeping a &lt;code&gt;cheatsheet.md&lt;/code&gt; post like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tree osgav/content
osgav/content
├── page
│   ├── hugo-markdown-cheatsheet.md 
│   └── projects.md
└── post
    ├── cheatsheet.md 
    ├── whois-osgav.md
    └── zerodots.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Keep a copy of &lt;code&gt;cheatsheet.md&lt;/code&gt; as a draft post, with a date in the future - this will make it the most recent post in your blog, so it will be the first post you see when testing locally with &lt;code&gt;hugo server&lt;/code&gt; (and passing in the &lt;code&gt;--buildDrafts&lt;/code&gt; parameter).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ head content/post/cheatsheet.md
+++
author = &amp;quot;osgav&amp;quot;
date = &amp;quot;2070-01-01T00:00:00Z&amp;quot;
draft = true
slug = &amp;quot;cheatsheet&amp;quot;
tags = [&amp;quot;formatting-cheatsheet-dont-undraft&amp;quot;]
title = &amp;quot;cheatsheet&amp;quot;

+++
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://osgav.run/images/hugo_cheatsheet_draft.png&#34; alt=&#34;hugo cheatsheet draft&#34; /&gt;
&lt;img src=&#34;https://osgav.run/images/hugo_cheatsheet.png&#34; alt=&#34;hugo cheatsheet&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;https://osgav.run/page/projects&#34;&gt;&amp;lt; back to projects&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ZER0D0TS</title>
      <link>https://osgav.run/post/zerodots/</link>
      <pubDate>Sat, 11 Jun 2016 15:50:35 +0000</pubDate>
      
      <guid>https://osgav.run/post/zerodots/</guid>
      <description>&lt;p&gt;&lt;code&gt;ZER0D0TS&lt;/code&gt; is my username on &lt;a href=&#34;https://twitter.com/ZER0D0TS&#34; title=&#34;ZER0D0TS&#34;&gt;Twitter&lt;/a&gt; and an old WordPress blog I never really used. May it rest in peace. This blog on the other hand I shall keep alive with a slow drip of posts and curious projects&amp;hellip; the first of which, shall be the infamous &lt;strong&gt;&lt;em&gt;how I set up this blog&lt;/em&gt;&lt;/strong&gt; post!&lt;/p&gt;

&lt;p&gt;For now, this &lt;a href=&#34;https://osgav.run/page/projects/hugo-markdown-cheatsheet&#34;&gt;hugo markdown cheatsheet&lt;/a&gt; is a taster of the sort of things I&amp;rsquo;m going to do to make blogging easier for myself.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://osgav.run/images/rip.png&#34; alt=&#34;rest in peace&#34; title=&#34;rip&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>$ whois osgav</title>
      <link>https://osgav.run/post/whois-osgav/</link>
      <pubDate>Sun, 05 Jun 2016 13:41:15 +0000</pubDate>
      
      <guid>https://osgav.run/post/whois-osgav/</guid>
      <description>&lt;p&gt;As a Global Availability &amp;amp; Performance Engineer, or more generally a Systems Engineer, I find myself using a multitude of web portals, tools and API integrations to monitor, analyze and optimize the health of a high traffic global travel search engine.&lt;/p&gt;

&lt;p&gt;This engine is comprised of various website, API and backend systems. There are different systems for monitoring the operation (CDN &amp;amp; GLB), availability, performance (RUM &amp;amp; APM), OS metrics and business KPIs across all of these. My team are the administrators for the availability and performance systems, and we work on creating Global Health views across all of these systems - also integrating with alerting solutions - to give the developers building and running them a better idea of how their products are performing.&lt;/p&gt;

&lt;p&gt;We are a fairly small team spread across the globe, with a couple of engineers on the &lt;sup&gt;24&lt;/sup&gt;&amp;frasl;&lt;sub&gt;7&lt;/sub&gt; support rota and another two engineers in HQ doing in-hours support. We always have some BI analysts nearby, and a familiar selection of &lt;sup&gt;24&lt;/sup&gt;&amp;frasl;&lt;sub&gt;7&lt;/sub&gt; support engineers but generally work with anyone and everyone from Engineering and some other business areas such as Growth and Employee &amp;amp; Developer Enablement.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SEE ALSO
      ZER0D0TS(8)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;lt;&lt;a href=&#34;https://osgav.run/post/zerodots&#34;&gt;https://osgav.run/post/zerodots&lt;/a&gt;&amp;gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>$ cd projects</title>
      <link>https://osgav.run/page/projects/</link>
      <pubDate>Sat, 11 Jun 2016 16:39:58 +0000</pubDate>
      
      <guid>https://osgav.run/page/projects/</guid>
      <description>

&lt;p&gt;Project pages for content outside of or accompanying blog posts&lt;/p&gt;

&lt;h5 id=&#34;this-blog:3c42bb4157bf51d85ae7ffc4e1685909&#34;&gt;this blog&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;https://osgav.run/page/projects/hugo-platform-runbook&#34;&gt;Hugo Platform Runbook&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://osgav.run/page/projects/hugo-build-and-publish-workflow&#34;&gt;Hugo Build and Publish Workflow&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://osgav.run/page/projects/hugo-markdown-cheatsheet&#34;&gt;Hugo Markdown Cheatsheet&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>